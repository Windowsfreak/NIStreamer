package de.windowsfreak.testjni;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.nio.ByteBuffer;

public class Window extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private ShortBufferPanel imagePanel;
    private JSlider slider1;
    private JSlider slider2;
    private JLabel slider1Label;
    private JLabel slider2Label;
    private ByteBuffer src;
    private int x = 640, y = 480;
    private Config config;

    public Window() {
        imagePanel.setPreferredSize(new Dimension(x, y));
        setContentPane(contentPane);
        setModal(false);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });
        slider1.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                slider1Label.setText("Black value: " + slider1.getValue());
                if (slider2.getValue() < slider1.getValue()) {
                    slider2.setValue(slider1.getValue());
                } else {
                    updateImage();
                }
            }
        });
        slider2.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                slider2Label.setText("White value: " + slider2.getValue());
                if (slider1.getValue() > slider2.getValue()) {
                    slider1.setValue(slider2.getValue());
                } else {
                    updateImage();
                }
            }
        });
        /*
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                dispose();
                Main.updateWindowCounter(-1);
            }
        });
        */
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    public void setSourceImage(ByteBuffer src, Config config) {
        final int x = config.x;
        final int y = config.y;
        this.config = config;
        this.src = src;
        if (this.x != x || this.y != y) {
            this.x = x;
            this.y = y;
            //imagePanel.setSize(x, y);
            imagePanel.setPreferredSize(new Dimension(x, y));
            contentPane.invalidate();
            this.pack();
        }
        updateImage();
    }

    public void updateImage() {
        if (imagePanel != null) {
            imagePanel.setImage(src, slider1.getValue(), slider2.getValue(), config);
            imagePanel.repaint();
        }
    }

    private void onOK() {
        dispose();
    }

    public static void main(String[] args) {
        makeWindow(args.length > 0 ? args[0] : null);
    }

    public static Window makeWindow(String title) {
        Window dialog = new Window();
        dialog.setTitle(title != null ? title : "No image");
        dialog.pack();
        return dialog;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slider1 = new JSlider();
        slider1.setFont(new Font(slider1.getFont().getName(), slider1.getFont().getStyle(), 8));
        slider1.setMajorTickSpacing(13000);
        slider1.setMaximum(65535);
        slider1.setMinorTickSpacing(1000);
        slider1.setPaintLabels(true);
        slider1.setPaintTicks(true);
        slider1.setValue(0);
        panel2.add(slider1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slider2 = new JSlider();
        slider2.setFont(new Font(slider2.getFont().getName(), slider2.getFont().getStyle(), 8));
        slider2.setMajorTickSpacing(13000);
        slider2.setMaximum(65535);
        slider2.setMinorTickSpacing(1000);
        slider2.setPaintLabels(true);
        slider2.setPaintTicks(true);
        slider2.setSnapToTicks(false);
        slider2.setValue(65535);
        panel2.add(slider2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slider1Label = new JLabel();
        slider1Label.setText("Black value: 0");
        panel2.add(slider1Label, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slider2Label = new JLabel();
        slider2Label.setText("White value: 65535");
        panel2.add(slider2Label, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imagePanel = new Surface();
        contentPane.add(imagePanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
